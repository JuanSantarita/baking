{"version":3,"sources":["components/navbar.js","components/react-bootstrap/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","_useState","useState","_useState2","Object","slicedToArray","active","setActive","_useState3","_useState4","icon","setIcon","react_default","a","createElement","className","href","onClick","UncontrolledExample","esm_Carousel","url","name","desc","map","image","Item","src","width","class","Caption","App","components_navbar","react_bootstrap_Carousel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8d0267b5.chunk.js","sourcesContent":["import  React, { useState } from \"react\";\nimport \"../navbar.css\";\n\nfunction Navbar() {\n  const [active, setActive] = useState(\"nav__menu\");\n  const [icon, setIcon] = useState(\"nav__toggler\");\n  const navToggle = () => {\n    if (active === \"nav__menu\") {\n      setActive(\"nav__menu nav__active\");\n    } else setActive(\"nav__menu\");\n\n    // Icon Toggler\n    if (icon === \"nav__toggler\") {\n      setIcon(\"nav__toggler toggle\");\n    } else setIcon(\"nav__toggler\");\n  };\n  return (\n    <nav className=\"nav\">\n      <a href=\"#\" className=\"nav__brand\">\n        Cake + Art\n      </a>\n      <ul className={active}>\n        <li className=\"nav__item\">\n          <a href=\"#\" className=\"nav__link\">\n            Fondant Cakes\n          </a>\n        </li>\n        <li className=\"nav__item\">\n          <a href=\"#\" className=\"nav__link\">\n            Icing Cakes\n          </a>\n        </li>\n        <li className=\"nav__item\">\n          <a href=\"#\" className=\"nav__link\">\n            Dessert Table\n          </a>\n        </li>\n        <li className=\"nav__item\">\n          <a href=\"#\" className=\"nav__link\">\n            Contact\n          </a>\n        </li>\n      </ul>\n      <div onClick={navToggle} className={icon}>\n        <div className=\"line1\"></div>\n        <div className=\"line2\"></div>\n        <div className=\"line3\"></div>\n      </div>\n      \n    </nav>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport Carousel from 'react-bootstrap/Carousel';\n\n\nfunction UncontrolledExample() {\n  const images = [{url:\"https://iili.io/HiPTVb2.jpg\",name:\"Fondant 1\", desc : \"test1\"},\n                  {url:\"https://iili.io/HiPTola.jpg\",name:\"Fondant 2\", desc:\"test2\"},\n                  {url:\"https://iili.io/Hsk39CQ.jpg\", name:\"fondant 3\", desc: \"test3\"},\n                  {url: \"https://iili.io/Hsk2pZx.jpg\", name:\"fondant 4\", desc: \"test4\"},\n                  {url:\"https://iili.io/Hsk2mjj.jpg\", name: \"fondant 5\", desc: \"test5\"},\n                 ]; \n  return (\n    \n    <Carousel>\n      {images.map (image => (\n        <Carousel.Item>\n              <img src={image.url} width=\"500\" class=\"carousel_img\"/>\n              <Carousel.Caption>\n            <div class=\"image_name\">{image.name}</div>\n          </Carousel.Caption>\n        </Carousel.Item>\n        ))}\n    </Carousel>\n  );\n}\n\nexport default UncontrolledExample;","\nimport React from \"react\";\nimport Navbar from \"./components/navbar\";\n// import Homepage from \"./components/homepage\";\nimport Carousel from './components/react-bootstrap/Carousel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  \n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <Navbar />\n      </div>\n      <div class=\"homepage_carousel row\">\n        <Carousel/>\n       </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./components/react-bootstrap/Carousel.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}